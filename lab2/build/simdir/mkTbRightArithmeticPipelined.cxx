/*
 * Generated by Bluespec Compiler, version 2024.07 (build b4f31db)
 * 
 * On Wed Mar 26 22:21:19 KST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRightArithmeticPipelined.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									 2863311530u,
									 42u };
static tUWide const UWide_literal_72_h2aaaaaaaaaaaaaaaaa(72u,
							 UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_2("FAILED %d correct values out of %d", 34u);
static std::string const __str_literal_3("FAILED Right Arithmetic Shift %b >> %d gave %b instead of %b",
					 60u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRightArithmeticPipelined::MOD_mkTbRightArithmeticPipelined(tSimStateHdl simHdl,
								   char const *name,
								   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_bsrap_bsrp_inFifo(simHdl, "bsrap_bsrp_inFifo", this, 71u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_outFifo(simHdl, "bsrap_bsrp_outFifo", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_sReg1(simHdl,
			  "bsrap_bsrp_sReg1",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg2(simHdl,
			  "bsrap_bsrp_sReg2",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_correct(simHdl, "correct", this, 32u, 0u, (tUInt8)0u),
    INST_input_cycle(simHdl, "input_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_output_cycle(simHdl, "output_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomShift_init(simHdl, "randomShift_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal_init(simHdl, "randomVal_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_valFifo(simHdl, "valFifo", this, 70u, 10u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_bsrap_bsrp_sReg2___d5(72u),
    DEF_x__h22736(12297829382473034410llu),
    DEF_TASK_getRandom___d83(12297829382473034410llu),
    DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86(70u),
    DEF_bsrap_bsrp_sReg1___d24(72u),
    DEF_bsrap_bsrp_inFifo_first____d11(71u),
    DEF_valFifo_first____d103(70u),
    DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41(72u),
    DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23(72u),
    DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88(71u)
{
  symbol_count = 17u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRightArithmeticPipelined::init_symbols_0()
{
  init_symbol(&symbols[0u], "bsrap_bsrp_inFifo", SYM_MODULE, &INST_bsrap_bsrp_inFifo);
  init_symbol(&symbols[1u], "bsrap_bsrp_outFifo", SYM_MODULE, &INST_bsrap_bsrp_outFifo);
  init_symbol(&symbols[2u], "bsrap_bsrp_sReg1", SYM_MODULE, &INST_bsrap_bsrp_sReg1);
  init_symbol(&symbols[3u], "bsrap_bsrp_sReg2", SYM_MODULE, &INST_bsrap_bsrp_sReg2);
  init_symbol(&symbols[4u], "correct", SYM_MODULE, &INST_correct);
  init_symbol(&symbols[5u], "input_cycle", SYM_MODULE, &INST_input_cycle);
  init_symbol(&symbols[6u], "output_cycle", SYM_MODULE, &INST_output_cycle);
  init_symbol(&symbols[7u], "RL_bsrap_bsrp_shift_inelastic_pipelining", SYM_RULE);
  init_symbol(&symbols[8u], "RL_randomShift_initialize", SYM_RULE);
  init_symbol(&symbols[9u], "RL_randomVal_initialize", SYM_RULE);
  init_symbol(&symbols[10u], "RL_test_request", SYM_RULE);
  init_symbol(&symbols[11u], "RL_test_response", SYM_RULE);
  init_symbol(&symbols[12u], "randomShift_init", SYM_MODULE, &INST_randomShift_init);
  init_symbol(&symbols[13u], "randomVal_init", SYM_MODULE, &INST_randomVal_init);
  init_symbol(&symbols[14u], "valFifo", SYM_MODULE, &INST_valFifo);
  init_symbol(&symbols[15u], "x__h22958", SYM_DEF, &DEF_x__h22958, 32u);
  init_symbol(&symbols[16u], "x__h23314", SYM_DEF, &DEF_x__h23314, 32u);
}


/* Rule actions */

void MOD_mkTbRightArithmeticPipelined::RL_bsrap_bsrp_shift_inelastic_pipelining()
{
  tUInt8 DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44;
  tUInt8 DEF_bsrap_bsrp_sReg1_4_BIT_0_7_CONCAT_bsrap_bsrp_s_ETC___d28;
  tUInt8 DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13;
  tUInt8 DEF_bsrap_bsrp_sReg2_BIT_0___d43;
  tUInt8 DEF_bsrap_bsrp_sReg1_4_BIT_0___d27;
  tUInt64 DEF_IF_bsrap_bsrp_sReg2_BIT_5_0_THEN_bsrap_bsrp_sR_ETC___d67;
  tUInt64 DEF_IF_bsrap_bsrp_sReg1_4_BIT_3_2_THEN_bsrap_bsrp__ETC___d36;
  tUInt64 DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_4_THEN_bsr_ETC___d18;
  tUInt64 DEF__theResult_____1__h454;
  tUInt64 DEF_x__h411;
  tUInt64 DEF__theResult_____1__h535;
  tUInt64 DEF__theResult_____1__h7936;
  tUInt64 DEF__theResult_____1__h7877;
  tUInt64 DEF_x__h7842;
  tUInt64 DEF__theResult_____1__h15265;
  tUInt64 DEF__theResult_____1__h15206;
  tUInt64 DEF_x__h15163;
  DEF_bsrap_bsrp_sReg2___d5 = INST_bsrap_bsrp_sReg2.METH_read();
  DEF_bsrap_bsrp_sReg1___d24 = INST_bsrap_bsrp_sReg1.METH_read();
  DEF_bsrap_bsrp_inFifo_first____d11 = INST_bsrap_bsrp_inFifo.METH_first();
  DEF_bsrap_bsrp_inFifo_notEmpty____d1 = INST_bsrap_bsrp_inFifo.METH_notEmpty();
  DEF_bsrap_bsrp_sReg1_4_BIT_0___d27 = DEF_bsrap_bsrp_sReg1___d24.get_bits_in_word8(0u, 0u, 1u);
  DEF_bsrap_bsrp_sReg2_BIT_71___d6 = DEF_bsrap_bsrp_sReg2___d5.get_bits_in_word8(2u, 7u, 1u);
  DEF_bsrap_bsrp_sReg2_BIT_0___d43 = DEF_bsrap_bsrp_sReg2___d5.get_bits_in_word8(0u, 0u, 1u);
  DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
												    0u,
												    1u);
  DEF__theResult_____1__h535 = (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13)) << 63u) | primExtract64(63u,
														71u,
														DEF_bsrap_bsrp_inFifo_first____d11,
														32u,
														70u,
														32u,
														8u);
  DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_4_THEN_bsr_ETC___d18 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
														      1u,
														      1u) ? DEF__theResult_____1__h535 : primExtract64(64u,
																				       71u,
																				       DEF_bsrap_bsrp_inFifo_first____d11,
																				       32u,
																				       70u,
																				       32u,
																				       7u);
  DEF__theResult_____1__h454 = ((((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13)) << 63u) | (((tUInt64)(DEF_bsrap_bsrp_inFifo_first__1_BIT_0___d13)) << 62u)) | (tUInt64)(DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_4_THEN_bsr_ETC___d18 >> 2u);
  DEF_x__h411 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
								     2u,
								     1u) ? DEF__theResult_____1__h454 : DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_4_THEN_bsr_ETC___d18;
  DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_inFifo_notEmpty____d1 << 7u) | (tUInt8)(DEF_x__h411 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h411 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h411)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																												    0u,
																												    7u)),
														      0u);
  DEF_bsrap_bsrp_sReg1_4_BIT_0_7_CONCAT_bsrap_bsrp_s_ETC___d28 = (tUInt8)3u & ((DEF_bsrap_bsrp_sReg1_4_BIT_0___d27 << 1u) | DEF_bsrap_bsrp_sReg1_4_BIT_0___d27);
  DEF__theResult_____1__h7936 = ((((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0_7_CONCAT_bsrap_bsrp_s_ETC___d28)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0_7_CONCAT_bsrap_bsrp_s_ETC___d28)) << 60u)) | primExtract64(60u,
																											  72u,
																											  DEF_bsrap_bsrp_sReg1___d24,
																											  32u,
																											  70u,
																											  32u,
																											  11u);
  DEF_IF_bsrap_bsrp_sReg1_4_BIT_3_2_THEN_bsrap_bsrp__ETC___d36 = DEF_bsrap_bsrp_sReg1___d24.get_bits_in_word8(0u,
													      3u,
													      1u) ? DEF__theResult_____1__h7936 : primExtract64(64u,
																				72u,
																				DEF_bsrap_bsrp_sReg1___d24,
																				32u,
																				70u,
																				32u,
																				7u);
  DEF__theResult_____1__h7877 = (((((((((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0_7_CONCAT_bsrap_bsrp_s_ETC___d28)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0___d27)) << 61u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0___d27)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0___d27)) << 59u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0___d27)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0___d27)) << 57u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_4_BIT_0___d27)) << 56u)) | (tUInt64)(DEF_IF_bsrap_bsrp_sReg1_4_BIT_3_2_THEN_bsrap_bsrp__ETC___d36 >> 8u);
  DEF_x__h7842 = DEF_bsrap_bsrp_sReg1___d24.get_bits_in_word8(0u,
							      4u,
							      1u) ? DEF__theResult_____1__h7877 : DEF_IF_bsrap_bsrp_sReg1_4_BIT_3_2_THEN_bsrap_bsrp__ETC___d36;
  DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg1___d24.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h7842 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h7842 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h7842)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg1___d24.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44 = (tUInt8)3u & ((DEF_bsrap_bsrp_sReg2_BIT_0___d43 << 1u) | DEF_bsrap_bsrp_sReg2_BIT_0___d43);
  DEF__theResult_____1__h15265 = ((((((((((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 56u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 54u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 52u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 50u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 48u)) | primExtract64(48u,
																																																																																												     72u,
																																																																																												     DEF_bsrap_bsrp_sReg2___d5,
																																																																																												     32u,
																																																																																												     70u,
																																																																																												     32u,
																																																																																												     23u);
  DEF_IF_bsrap_bsrp_sReg2_BIT_5_0_THEN_bsrap_bsrp_sR_ETC___d67 = DEF_bsrap_bsrp_sReg2___d5.get_bits_in_word8(0u,
													     5u,
													     1u) ? DEF__theResult_____1__h15265 : primExtract64(64u,
																				72u,
																				DEF_bsrap_bsrp_sReg2___d5,
																				32u,
																				70u,
																				32u,
																				7u);
  DEF__theResult_____1__h15206 = (((((((((((((((((((((((((((((((((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0_3_CONCAT_bsrap_bsrp_sRe_ETC___d44)) << 62u) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 61u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 59u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 57u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 56u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 55u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 54u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 53u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 52u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 51u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 50u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 49u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 48u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 47u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 46u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 45u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 44u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 43u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 42u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 41u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 40u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 39u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 38u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 37u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 36u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 35u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 34u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 33u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_BIT_0___d43)) << 32u)) | (tUInt64)((tUInt32)(DEF_IF_bsrap_bsrp_sReg2_BIT_5_0_THEN_bsrap_bsrp_sR_ETC___d67 >> 32u));
  DEF_x__h15163 = DEF_bsrap_bsrp_sReg2___d5.get_bits_in_word8(0u,
							      6u,
							      1u) ? DEF__theResult_____1__h15206 : DEF_IF_bsrap_bsrp_sReg2_BIT_5_0_THEN_bsrap_bsrp_sR_ETC___d67;
  INST_bsrap_bsrp_sReg1.METH_write(DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23);
  if (DEF_bsrap_bsrp_inFifo_notEmpty____d1)
    INST_bsrap_bsrp_inFifo.METH_deq();
  INST_bsrap_bsrp_sReg2.METH_write(DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41);
  if (DEF_bsrap_bsrp_sReg2_BIT_71___d6)
    INST_bsrap_bsrp_outFifo.METH_enq(DEF_x__h15163);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomVal_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3735928559llu);
  INST_randomVal_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomShift_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3405691582llu);
  INST_randomShift_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_request()
{
  tUInt32 DEF_x__h22939;
  tUInt8 DEF_x__h22911;
  tUInt8 DEF_x__h22882;
  DEF_x__h22958 = INST_input_cycle.METH_read();
  DEF_x__h22939 = DEF_x__h22958 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_TASK_getRandom___d83 = getRandom();
  DEF_x__h22911 = (tUInt8)(DEF_TASK_getRandom___d83 >> 63u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h22736 = getRandom();
  DEF_x__h22882 = (tUInt8)((tUInt8)63u & DEF_x__h22736);
  DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d83 >> 58u),
										2u,
										0u,
										6u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d83 >> 26u),
												   1u).set_whole_word((((tUInt32)(67108863u & DEF_TASK_getRandom___d83)) << 6u) | (tUInt32)(DEF_x__h22882),
														      0u);
  DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d83 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d83 >> 25u),
												   1u).set_whole_word(((((tUInt32)(33554431u & DEF_TASK_getRandom___d83)) << 7u) | (((tUInt32)(DEF_x__h22882)) << 1u)) | (tUInt32)(DEF_x__h22911),
														      0u);
  INST_valFifo.METH_enq(DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86);
  INST_bsrap_bsrp_inFifo.METH_enq(DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88);
  INST_input_cycle.METH_write(DEF_x__h22939);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_response()
{
  tUInt32 DEF_x__h23310;
  tUInt32 DEF_x__h23181;
  tUInt8 DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98;
  tUInt8 DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100;
  tUInt8 DEF_NOT_output_cycle_0_EQ_128_1_01_AND_bsrap_bsrp__ETC___d108;
  tUInt8 DEF_NOT_output_cycle_0_EQ_128_1___d101;
  tUInt8 DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111;
  tUInt8 DEF_correct_6_EQ_128___d97;
  tUInt64 DEF_trueResult__h23109;
  tUInt8 DEF_valFifo_first__03_BITS_5_TO_0___d105;
  tUInt64 DEF_val__h23106;
  tUInt64 DEF_v__h23045;
  tUInt32 DEF_x__h23200;
  tUInt8 DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107;
  DEF_x__h23314 = INST_output_cycle.METH_read();
  DEF_x__h23200 = INST_correct.METH_read();
  DEF_valFifo_first____d103 = INST_valFifo.METH_first();
  DEF_v__h23045 = INST_bsrap_bsrp_outFifo.METH_first();
  DEF_val__h23106 = primExtract64(64u, 70u, DEF_valFifo_first____d103, 32u, 69u, 32u, 6u);
  DEF_valFifo_first__03_BITS_5_TO_0___d105 = DEF_valFifo_first____d103.get_bits_in_word8(0u, 0u, 6u);
  DEF_trueResult__h23109 = primShiftRA64(64u,
					 64u,
					 (tUInt64)(DEF_val__h23106),
					 6u,
					 (tUInt8)(DEF_valFifo_first__03_BITS_5_TO_0___d105));
  DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107 = DEF_v__h23045 == DEF_trueResult__h23109;
  DEF_correct_6_EQ_128___d97 = DEF_x__h23200 == 128u;
  DEF_output_cycle_0_EQ_128___d91 = DEF_x__h23314 == 128u;
  DEF_NOT_output_cycle_0_EQ_128_1___d101 = !DEF_output_cycle_0_EQ_128___d91;
  DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111 = DEF_NOT_output_cycle_0_EQ_128_1___d101 && !DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107;
  DEF_NOT_output_cycle_0_EQ_128_1_01_AND_bsrap_bsrp__ETC___d108 = DEF_NOT_output_cycle_0_EQ_128_1___d101 && DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107;
  DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100 = DEF_output_cycle_0_EQ_128___d91 && !DEF_correct_6_EQ_128___d97;
  DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98 = DEF_output_cycle_0_EQ_128___d91 && DEF_correct_6_EQ_128___d97;
  DEF_x__h23181 = DEF_x__h23200 + 1u;
  DEF_x__h23310 = DEF_x__h23314 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_2, DEF_x__h23200, DEF_x__h23314);
    if (DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_0_EQ_128_1___d101)
    INST_bsrap_bsrp_outFifo.METH_deq();
  if (DEF_NOT_output_cycle_0_EQ_128_1_01_AND_bsrap_bsrp__ETC___d108)
    INST_correct.METH_write(DEF_x__h23181);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111)
      dollar_display(sim_hdl,
		     this,
		     "s,64,6,64,64",
		     &__str_literal_3,
		     DEF_val__h23106,
		     DEF_valFifo_first__03_BITS_5_TO_0___d105,
		     DEF_v__h23045,
		     DEF_trueResult__h23109);
    if (DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_0_EQ_128_1___d101)
    INST_valFifo.METH_deq();
  if (DEF_NOT_output_cycle_0_EQ_128_1___d101)
    INST_output_cycle.METH_write(DEF_x__h23310);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRightArithmeticPipelined::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_valFifo.reset_RST(ARG_rst_in);
  INST_randomVal_init.reset_RST(ARG_rst_in);
  INST_randomShift_init.reset_RST(ARG_rst_in);
  INST_output_cycle.reset_RST(ARG_rst_in);
  INST_input_cycle.reset_RST(ARG_rst_in);
  INST_correct.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg2.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg1.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_outFifo.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_inFifo.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRightArithmeticPipelined::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRightArithmeticPipelined::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bsrap_bsrp_inFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_outFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg1.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg2.dump_state(indent + 2u);
  INST_correct.dump_state(indent + 2u);
  INST_input_cycle.dump_state(indent + 2u);
  INST_output_cycle.dump_state(indent + 2u);
  INST_randomShift_init.dump_state(indent + 2u);
  INST_randomVal_init.dump_state(indent + 2u);
  INST_valFifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRightArithmeticPipelined::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 26u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom___d83", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_first____d11", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg1___d24", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg2_BIT_71___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg2___d5", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "output_cycle_0_EQ_128___d91", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "valFifo_first____d103", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h22736", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h22958", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h23314", 32u);
  num = INST_bsrap_bsrp_inFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_outFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg1.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg2.dump_VCD_defs(num);
  num = INST_correct.dump_VCD_defs(num);
  num = INST_input_cycle.dump_VCD_defs(num);
  num = INST_output_cycle.dump_VCD_defs(num);
  num = INST_randomShift_init.dump_VCD_defs(num);
  num = INST_randomVal_init.dump_VCD_defs(num);
  num = INST_valFifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRightArithmeticPipelined::dump_VCD(tVCDDumpType dt,
						unsigned int levels,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRightArithmeticPipelined::vcd_defs(tVCDDumpType dt,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86) != DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86, 70u);
	backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88) != DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88, 71u);
	backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom___d83) != DEF_TASK_getRandom___d83)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom___d83, 64u);
	backing.DEF_TASK_getRandom___d83 = DEF_TASK_getRandom___d83;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_first____d11) != DEF_bsrap_bsrp_inFifo_first____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
	backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23) != DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23, 72u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1) != DEF_bsrap_bsrp_inFifo_notEmpty____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41) != DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41, 72u);
	backing.DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41 = DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg1___d24) != DEF_bsrap_bsrp_sReg1___d24)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg1___d24, 72u);
	backing.DEF_bsrap_bsrp_sReg1___d24 = DEF_bsrap_bsrp_sReg1___d24;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg2_BIT_71___d6) != DEF_bsrap_bsrp_sReg2_BIT_71___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg2_BIT_71___d6, 1u);
	backing.DEF_bsrap_bsrp_sReg2_BIT_71___d6 = DEF_bsrap_bsrp_sReg2_BIT_71___d6;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg2___d5) != DEF_bsrap_bsrp_sReg2___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg2___d5, 72u);
	backing.DEF_bsrap_bsrp_sReg2___d5 = DEF_bsrap_bsrp_sReg2___d5;
      }
      ++num;
      if ((backing.DEF_output_cycle_0_EQ_128___d91) != DEF_output_cycle_0_EQ_128___d91)
      {
	vcd_write_val(sim_hdl, num, DEF_output_cycle_0_EQ_128___d91, 1u);
	backing.DEF_output_cycle_0_EQ_128___d91 = DEF_output_cycle_0_EQ_128___d91;
      }
      ++num;
      if ((backing.DEF_valFifo_first____d103) != DEF_valFifo_first____d103)
      {
	vcd_write_val(sim_hdl, num, DEF_valFifo_first____d103, 70u);
	backing.DEF_valFifo_first____d103 = DEF_valFifo_first____d103;
      }
      ++num;
      if ((backing.DEF_x__h22736) != DEF_x__h22736)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h22736, 64u);
	backing.DEF_x__h22736 = DEF_x__h22736;
      }
      ++num;
      if ((backing.DEF_x__h22958) != DEF_x__h22958)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h22958, 32u);
	backing.DEF_x__h22958 = DEF_x__h22958;
      }
      ++num;
      if ((backing.DEF_x__h23314) != DEF_x__h23314)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h23314, 32u);
	backing.DEF_x__h23314 = DEF_x__h23314;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86, 70u);
      backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88, 71u);
      backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom___d83, 64u);
      backing.DEF_TASK_getRandom___d83 = DEF_TASK_getRandom___d83;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
      backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23, 72u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d23;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41, 72u);
      backing.DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41 = DEF_bsrap_bsrp_sReg1_4_BIT_71_5_CONCAT_IF_bsrap_bs_ETC___d41;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg1___d24, 72u);
      backing.DEF_bsrap_bsrp_sReg1___d24 = DEF_bsrap_bsrp_sReg1___d24;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg2_BIT_71___d6, 1u);
      backing.DEF_bsrap_bsrp_sReg2_BIT_71___d6 = DEF_bsrap_bsrp_sReg2_BIT_71___d6;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg2___d5, 72u);
      backing.DEF_bsrap_bsrp_sReg2___d5 = DEF_bsrap_bsrp_sReg2___d5;
      vcd_write_val(sim_hdl, num++, DEF_output_cycle_0_EQ_128___d91, 1u);
      backing.DEF_output_cycle_0_EQ_128___d91 = DEF_output_cycle_0_EQ_128___d91;
      vcd_write_val(sim_hdl, num++, DEF_valFifo_first____d103, 70u);
      backing.DEF_valFifo_first____d103 = DEF_valFifo_first____d103;
      vcd_write_val(sim_hdl, num++, DEF_x__h22736, 64u);
      backing.DEF_x__h22736 = DEF_x__h22736;
      vcd_write_val(sim_hdl, num++, DEF_x__h22958, 32u);
      backing.DEF_x__h22958 = DEF_x__h22958;
      vcd_write_val(sim_hdl, num++, DEF_x__h23314, 32u);
      backing.DEF_x__h23314 = DEF_x__h23314;
    }
}

void MOD_mkTbRightArithmeticPipelined::vcd_prims(tVCDDumpType dt,
						 MOD_mkTbRightArithmeticPipelined &backing)
{
  INST_bsrap_bsrp_inFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_inFifo);
  INST_bsrap_bsrp_outFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_outFifo);
  INST_bsrap_bsrp_sReg1.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg1);
  INST_bsrap_bsrp_sReg2.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg2);
  INST_correct.dump_VCD(dt, backing.INST_correct);
  INST_input_cycle.dump_VCD(dt, backing.INST_input_cycle);
  INST_output_cycle.dump_VCD(dt, backing.INST_output_cycle);
  INST_randomShift_init.dump_VCD(dt, backing.INST_randomShift_init);
  INST_randomVal_init.dump_VCD(dt, backing.INST_randomVal_init);
  INST_valFifo.dump_VCD(dt, backing.INST_valFifo);
}
